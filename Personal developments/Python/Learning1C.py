 
from imghdr import tests
import telebot
from telebot import types # для указание типов
import config
from xml.etree.ElementTree import tostring
import random
 
 
Select_Inf = ""
UserOtvet  = ""
VoprosRazd = ["Вопрос","Правильный"]

config.token = ""; #"Токен бота, куда выводить";
bot = telebot.TeleBot(config.token)

class Vopros_:
  def __init__(vopros_parametr, razdel, zagolovok, otvet_variant,good_otvet,peremeshka_otvetov,imgUrl = ""):
    vopros_parametr.razdel = razdel
    vopros_parametr.zagolovok = zagolovok
    vopros_parametr.variant_otvet = otvet_variant
    vopros_parametr.pravilnueOtvet = good_otvet
    vopros_parametr.parametr_peremeshka = peremeshka_otvetov
    vopros_parametr.img = imgUrl


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    btn1 = types.KeyboardButton("✦ Экзамен") 
    btn3 = types.KeyboardButton("✦ Разделы")
    btn2 = types.KeyboardButton("✧ Справка")
    markup.add(btn1)
    markup.add(btn3)
    markup.add(btn2)

    bot.send_message(message.chat.id, text="Главное меню \nБот для подготовки для сдачи Проф. 1С \nВерсия: [Alpha].".format(message.from_user), reply_markup=markup )

def Razdel1(message):
    #[["Во всем справочнике", "В пределах подчинения", "Варианты 1 и 2","Верны все указанные ответы"],['','','','']]
    Vopros1 = Vopros_(1,"*В какое значение можно установить свойство 'Серии кодов' объекта конфигурации 'Справочник'*",
    ["Во всем справочнике", "В пределах подчинения", "В пределах подчинения владельцу","Варианты 1 и 2","Верны все указанные ответы"],
    "Верны все указанные ответы",False)
    
    Vopros2 = Vopros_(1,"*В каком объекте производится редактирование информации пользователем (например экземпляра документа)?*",
    ["Объект конфигурации", "Объект встроенного языка", "Объект информационной базы","Форма объекта","Форма списка","Варианты 4 или 5"],
    "Форма объекта",False)

    Vopros3 = Vopros_(1,"*В механике полнотекстового поиска для поиска с учетом синонимов слова 'алый' используется выражение:*",
    ["!алый", "алый'", "(алый)","'алый'"],
    "!алый",True)

    Vopros4 = Vopros_(1,"*Внешние обработки используются:*",
    ["На стадии отладки, для более быстрого внесения изменений в обработку", "Для разграничения прав доступа к обработке'",
    "Для возможности редактирования/изменения функциональности обработки пользователем в режиме 1С:Предприятие",
    "Для реализации функциональности, не поставляемой с основной конфигурацией","Варианты 1 и/или 3","Варианты 1 и/или 4"],
    "Варианты 1 и/или 4",False)

    Vopros5 = Vopros_(1,"*Выберите верный набор ассоциаций 'Сущность системы' - 'тип файла'*",
    ["внешняя обработка - 'epf', внешний отчет - 'erf',\n конфигурация = 'cf'", "внешняя обработка - 'ert', внешний отчет - 'mxl', конфигурация = 'pfl'",
    "внешняя обработка - 'ert', внешний отчет - 'erf',\n конфигурация = 'cfu'", "внешняя обработка - 'epf', внешний отчет - 'mxl', конфигурация = 'cfu'",
    "внешняя обработка - 'epd', внешний отчет - 'erf',\n конфигурация = '1CD'"],
    "внешняя обработка - 'epf', внешний отчет - 'erf',\n конфигурация = 'cf'",True)

    Vopros6 = Vopros_(1,"*Внешняя обработка может быть включена в состав конфигурации:*",
    ["Как отчет", "Как обработка","Варианты 1 и 2","Варианты 1 и 2 (но возможна потеря функциональности)"],
    "Варианты 1 и 2",False)

    Vopros7 = Vopros_(1,"*Внешний отчет может быть включена в состав конфигурации:*",
    ["Как отчет", "Как обработка","Варианты 1 и 2","Варианты 1 и 2 (но возможна потеря функциональности)"],
    "Варианты 1 и 2 (но возможна потеря функциональности)",False)

    Vopros8 = Vopros_(1,"*Где определяется структура, прикладная логика, создаваемого бизнес-приложения в системе 1С:Предприятие 8*",
    ["Конфигурация", "Информационная база","СУБД","Варианты 2 или 3 (в зависимости от варианта использования системы)"],
    "Конфигурация",False)

    Vopros9 = Vopros_(1,"*Где хранятся учетные данные бизнес-приложения в системе 1С:Предприятие 8*",
    ["Технологическая платформа", "Конфигурация","Информационная база"],
    "Информационная база",True)

    Vopros10 = Vopros_(1,"*Для включения отборов в списках (обычных форм) по содержимому табличных частей объектов и их свойств, неотображаемых в форме:*",
    ["ничего дополнительно настраивать не надо, все реализовано на уровне платформы", "реализуется только запросами",
    "осуществляется только с помощью дополнительной настройки форм","необходимо создать объект критерии отбора"],
    "необходимо создать объект критерии отбора",True)

    Vopros11 = Vopros_(1,"*Для включения отборов в списках (управляемых форм) по содержимому табличных частей объектов и их свойств, неотображаемых в форме:*",
    ["ничего дополнительно настраивать не надо, все реализовано на уровне платформы", "реализуется произвольным запросом динамического списка",
    "осуществляется только с помощью дополнительной настройки форм","необходимо создать объект критерии отбора"],
    "ничего дополнительно настраивать не надо, все реализовано на уровне платформы",True)

    Vopros12 = Vopros_(1,"*Для установки языка интерфейса прикладного решения пользователю, необходимо:*",
    ["в настройках пользователя выбрать возможный язык, из списка дополнительных интерфейсов", 
    "в настройках пользователя выбрать возможный язык, из списка языков интерфейсов, заданных в ветви метаданных 'Языки'",
    "в настройках пользователя выбрать возможный язык, из списка предопределенных в платформе языков",
    "верны варианты 1 и 2","верны все варианты"],
    "в настройках пользователя выбрать возможный язык, из списка языков интерфейсов, заданных в ветви метаданных 'Языки'",False)

    Vopros13 = Vopros_(1,"*Для запрета режима непосредственного удаления объектов пользователем необходимо...*",
    ["в свойствах конфигурации снять флаг 'Разрешить непосредственное удаление объектов'", 
    "при определении роли для соответствующих объектов снять отметку у флага 'Удаление'",
    "при определении роли для соответствующих объектов снять отметку у флага 'Интерактивное удаление'",
    "в свойствах роли снять отметку у флага 'Разрешить удаление объектов'",
    "в свойствах роли снять отметку у флага 'Разрешить интерактивное удаление объектов'"],
    "при определении роли для соответствующих объектов снять отметку у флага 'Интерактивное удаление'",True)

    Vopros14 = Vopros_(1,"*Для каких компонент существуют сетевые ключи защиты?*",
    ["Клиентское приложение", "Мобильный клиент","Сервер 1С:Предприятия","Правильны ответы 1 и 3","Правильны ответы 1 и 2","Верны все ответы"],
    "Правильны ответы 1 и 2",False)

    Vopros15 = Vopros_(1,"*Для каких объектов конфигурации возможен ввод предопределенных значений?*",
    ["Справочники", "Документы","Планы видов характеристик, планы счетов, планы видов расчета",
    "Справочники, планы видов характеристик","Справочники, планы видов характеристик, планы счетов, планы видов расчета",
    "Все вышеперечисленные"],
    "Справочники, планы видов характеристик, планы счетов, планы видов расчета",False)

    Vopros16 = Vopros_(1,"* *",
    [" ", " "," "," "," "," "],
    "Варианты 1 и/или 4",False)

    Vopros17 = Vopros_(1,"* *",
    [" ", " "," "," "," "," "],
    "Варианты 1 и/или 4",False)

    Vopros18 = Vopros_(1,"* *",
    [" ", " "," "," "," "," "],
    "Варианты 1 и/или 4",False)

    Vopros19 = Vopros_(1,"* *",
    [" ", " "," "," "," "," "],
    "Варианты 1 и/или 4",False)

    Vopros20 = Vopros_(1,"* *",
    [" ", " "," "," "," "," "],
    "Варианты 1 и/или 4",False)


    #Vopros11 = Vopros_(1,"* *",
    #[" ", " "," "," "," "," "],
    #"Варианты 1 и/или 4",False)

    PackVoprosovRazdela = [Vopros1,Vopros2,Vopros3,Vopros4,Vopros5,Vopros6,Vopros7,Vopros8,Vopros9,Vopros10,Vopros11,Vopros12,Vopros13,Vopros14,Vopros15]

    #information = [Vopros1,Vopros1];
    #LoadQuestion(message,PackVoprosovRazdela)
    return PackVoprosovRazdela


def Razdel14(message):
    #[["Во всем справочнике", "В пределах подчинения", "Варианты 1 и 2","Верны все указанные ответы"],['','','','']]
    Vopros1 = Vopros_(14,"*Планы видов расчета предназначены...*",
    ["для описания множеств возможных видов расчета", "для накопления информации о периодических расчетах", 
    "для хранения информации о перерасчетах","верно все вышеперечисленное","верны утверждения 1 и 3"],
    "для описания множеств возможных видов расчета",False)
    
    Vopros2 = Vopros_(14,"*Виды расчетов - это...*",
    ["объект базы данных", "объекты конфигурации", "объекты встроенного языка"],
    "объект базы данных",True)

    Vopros3 = Vopros_(14,"*Свойство 'использует период действия' в плане видов расчета устанавливается, если...*",
    ["предполагается, что все виды расчета\nв плане будут обладать протяженностью во времени",
    "предполагается, что хотя бы один вид расчета в плане\nбудет обладать протяженностью во времени",
    "предполагается, что в регистре расчета,\nсвязанном с данным планом видов расчета,\nвсе записи будут обладать протяженностью во времени",
    "Верно утверждение 2 и 3"],
    "Верно утверждение 2 и 3",False)

    Vopros4 = Vopros_(14,"*Зависимость от базы как 'Зависимость по периоду действия' в плане видов расчета устанавливается, если...*",
    ["предполагается, что хотя бы один вид расчета в плане будет обладать протяженностью во времени", 
    "предполагается, что в дальнейшем при определении расчетной базы для записи регистра расчета будут учитываться только те записи, у которых фактический период действия попадает в базовый период", 
    "предполагается, что все виды расчета в плане будут обладать протяженностью во времени"],
    "предполагается, что в дальнейшем при определении расчетной базы для записи регистра расчета будут учитываться только те записи, у которых фактический период действия попадает в базовый период",True)

    Vopros5 = Vopros_(14,"*Зависимость от базы как 'Зависимость по периоду регистрации' в плане видов расчета устанавливается, если...*",
    ["предполагается, что в дальнейшем при определении расчетной базы для записи регистра расчета будут учитываться только те записи, у которых Период регистрации попадает в базовый период", 
    "предполагается, что ни один вид расчета в плане не будет обладать свойством действовать какой-то период времени", 
    "предполагается что в регистре расчета, связанном с данным планом видов расчета, все виды расчета не будут обладать свойством действовать какой-то период времени"],
    "предполагается, что в дальнейшем при определении расчетной базы для записи регистра расчета будут учитываться только те записи, у которых Период регистрации попадает в базовый период",True)

    Vopros6 = Vopros_(14,"*Базовые планы видов расчета - это:*",
    ["планы видов расчета, с которыми связаны регистры расчета", 
    "те планы видов расчета, из которых будут браться виды расчета для вычисления расчетной базы", 
    "те планы видов расчета, у которых свойство 'зависимость от базы' установлено в значение, отличное от 'не зависит'"],
    "те планы видов расчета, из которых будут браться виды расчета для вычисления расчетной базы",True)

    Vopros7 = Vopros_(14,"*Отсутствие предопределенной табличной части 'Базовые виды расчета' у видов расчета Плана видов расчета можно объяснить тем, что:*",
    ["в конфигурации задано несколько Планов видов расчета и в качестве базовых можно указать виды расчета из других планов видов расчета", 
    "в регистре расчета не установлен признак 'базовый период'", 
    "зависимость от базы в плане видов расчета не определена",
    "верны 1 и 3 ответы"],
    "зависимость от базы в плане видов расчета не определена",False)

    Vopros8 = Vopros_(14,"*Вытесняющие виды расчета - это такие виды расчета...*",
    ["записи которых в регистрах расчета должны вытеснять записи данного вида расчета по периоду действия", 
    "которые взаимноисключают друг друга по фактическому периоду действия и система должна гарантировать, что ввод одного вида расчета приведет к исключению другого вида расчета", 
    "которые исключают друг друга по периоду регистрации"],
    "записи которых в регистрах расчета должны вытеснять записи данного вида расчета по периоду действия",True)

    Vopros9 = Vopros_(14,"*Вытесняться могут виды расчета, которые...*",
    ["принадлежат нескольким планам видов расчета", 
    "принадлежат одному плану видов расчета", 
    "оба утверждения верны"],
    "принадлежат одному плану видов расчета",False)

    Vopros10 = Vopros_(14,"*Понятие вытесняющие виды расчетов теряют смысл, если...*",
    ["период действия в плане видов расчета не используется", 
    "фактический период действия в плане видов расчета не используется",
    "период регистрации и период действия в плане видов расчета не используется",
    "базовый период в плане видов расчета не используется"],
    "период действия в плане видов расчета не используется",True)

    Vopros11 = Vopros_(14,"*Ведущие виды расчета - это...*",
    ["виды расчета, при вводе (или изменении) которых результат текущего вида расчета должен быть пересчитан", 
     "которые взаимно исключают друг друга по периоду действия и система должна гарантировать, что ввод одного из них приведет к исключению другого",
     "виды расчета, при удалении которых запись с текущим видом расчета будет автоматически удалена"],
     "виды расчета, при вводе (или изменении) которых результат текущего вида расчета должен быть пересчитан",
     True)

    Vopros12 = Vopros_(14,"*В качестве ведущих можно указать...*",
    ["виды расчета из нескольких планов видов расчета", "виды расчета из одного плана видов расчета","оба утверждения верны"],
    "оба утверждения верны",False)

    Vopros13 = Vopros_(14,"*Для определения вида расчета как предопределенного:*",
    ["можно напрямую указать имя и записать в свойство 'Предопределенный' значение 'Истина' (если перед этим предопределенный вид расчета был удален из базы)", 
     "можно воспользоваться соответствующим методом объекта (если перед этим предопределенный вид расчета был удален из базы",
     "любым из перечисленных способов","нет правильного ответа"],
    "можно напрямую указать имя и записать в свойство 'Предопределенный' значение 'Истина' (если перед этим предопределенный вид расчета был удален из базы)",True)

    Vopros14 = Vopros_(14,"*Для обращения к  предопределенному виду расчета необходимо:*",
    ["найти его по неизменяемому коду: ПланыВидовРасчета.<Имя плана видов расчета>.НайтиПоКоду(Код)",
     "найти его по неизменяемому наименованию: ПланыВидовРасчета.<Имя плана видов расчета>.НайтиПоНаименованию(Наименование)",
     "найти его по заданному в конфигуратору имени: ПланыВидовРасчета.<Имя плана видов расчета>.<Имя предопределенного объекта>",
     "программно найти предопределенный элемент нельзя, пользователь просто его не может удалить и пометить на удаление"],
    "найти его по заданному в конфигуратору имени: ПланыВидовРасчета.<Имя плана видов расчета>.<Имя предопределенного объекта>",True)

    Vopros15 = Vopros_(14,"*У предопределенного вида расчета пользователь не может...*",
    ["изменить код", "изменить наименование","изменить наименование и код","изменить свойство 'Базовый период как период действия'","нет правильного ответа"],
    "нет правильного ответа",True)

    Vopros16 = Vopros_(14,"*Новые виды расчета:*",
    ["можно создать только в режиме '1С:Предприятие'", "можно создать только в режиме 'Конфигуратор'","можно создать в режиме '1С:Предприятие' и в режиме 'Конфигуратор'"],
    "можно создать в режиме '1С:Предприятие' и в режиме 'Конфигуратор'",True)

    Vopros17 = Vopros_(14,"*Ресурс у регистра расчета может иметь тип...*",
    ["любой (как у реквизита)", "только ссылочный","только логический и числовой","только числовой"],
    "только числовой",True)

    Vopros18 = Vopros_(14,"*В качестве регистратора у регистра расчета может выступать:*",
    ["справочник", "план видов расчета","документ","любой объект","только план видов расчета или документ"],
    "документ",True)

    Vopros19 = Vopros_(14,"*При записи в регистр расчета период регистрации:*",
    ["может устанавливаться произвольно","жестко привязан к дате документа","в случае если документ проводится оперативно, период регистрации жестко привязывается к дате документа"],
    "может устанавливаться произвольно",True)

    Vopros20 = Vopros_(14,"*Регистр расчета может заполняться...*",
    ["только вручную", "только при обработке проведения документов","программно из любого модуля конфигурации, но с обязательным указанием регистратора","в зависимости от состава определенных форм"],
    "программно из любого модуля конфигурации, но с обязательным указанием регистратора",True)

    Vopros21 = Vopros_(14,"*Регистры расчета служат:*",
    ["для накопления информации о переодических расчетах", "для описания множеств однотипных видов расчета",
     "для хранения сведений о перерасчетах"],
    "для накопления информации о переодических расчетах",True)

    Vopros22 = Vopros_(14,"*Свойство записи регистра расчета БазовыйПериодНачало, БазовыйПериодОкончание доступны только в том случае, когда:*",
    ["установлен флажок 'базовый период' в свойствах регистра расчета",
     "признак 'зависимость от базы' в свойствах плана видов расчета, с которым связан регистр расчета, установлен в положение, отличное от 'не зависит'", 
     "признак 'зависимость от базы' в свойствах плана видов расчета, с которым связан регистр расчета, установлен в положение, отличное от 'не зависит' и установлен флажок 'период действия' в свойствах регистра расчета"],
    "установлен флажок 'базовый период' в свойствах регистра расчета",True)

    Vopros23 = Vopros_(14,"*Свойство записи регистра расчета ПериодРегистрации - это...*",
    ["период, который принимает дискретные значения в зависимости от переодичности регистра расчета",
     "дата, которая принимает дискретные значения в зависимости от переодичности регистра расчета", 
     "нет правильных ответов"],
    "дата, которая принимает дискретные значения в зависимости от переодичности регистра расчета",False)

    Vopros24 = Vopros_(14,"*Переодичность ведения расчетов - месяц. В регистре расчета сделаны соответствующие настройки. К появлению какого количества записей приведет попытка вводы системой в регистр записи по больничному с 25.01.21 по 07.03.21?*",
    ["Одной с 25.01.21 по 07.03.21", "Двух: с 25.01.21 по 31.01.21 и с 01.02.21 по 07.03.21",
    "Трех: с 25.01.21 по 31.01.21, с 01.02.21 по 28.02.21 и с 01.03.21 по 07.03.21","Ни одной, будет выдано сообщение об ошибке"],
    "Ни одной, будет выдано сообщение об ошибке",True)

    Vopros25 = Vopros_(14,"*Значение свойства ПериодДействия:*",
    ["всегда совпадает со значением свойства ПериодДействияКонец", "всегда совпадает со значением свойства ПериодДействияНачало",
     "всегда приводится к началу периода, соответствующего значению свойства ПериодДействияНачало, и может не совпадать со значением свойства ПериодДействияНачало"],
    "всегда приводится к началу периода, соответствующего значению свойства ПериодДействияНачало, и может не совпадать со значением свойства ПериодДействияНачало",True)

    Vopros26 = Vopros_(14,"*период действия записи (задаваемый датой начала и датой окончания):*",
    ["может не совпадать с фактическим периодом действия", "всегда совпадает с фактическим периодом действия","никогда не совпадает с фактическим периодом действия"],
    "может не совпадать с фактическим периодом действия",True)

    Vopros27 = Vopros_(14,"*Базовый период - это...*",
    ["понятие, определяемое свойствами БазовыйПериодНачало и БазовыйПериодКонец, в котором лежат записи регистра расчета, входящие в состав расчетной базы текущей записи регистра расчета. Базовый период всегда приводится к началу периода и является датой, которая может не совпадать со значением свойства БазовыйПериодНачало",
     "интервал дат, определяемый свойствами БазовыйПериодНачало и БазовыйПериодКонец, в котором лежат записи регистра расчета, входящие в состав расчетной базы текущей записи регистра расчета",
     "период который принимает дискретные значения в зависимости от переодичности регистра расчета"],
    "интервал дат, определяемый свойствами БазовыйПериодНачало и БазовыйПериодКонец, в котором лежат записи регистра расчета, входящие в состав расчетной базы текущей записи регистра расчета",
    True)

    Vopros28 = Vopros_(14,"*Базовый период:*",
    ["всегда кратен периоду регистра расчета", "может быть не кратен периоду регистра расчета","всегда лежит в одном периоде регистра расчета"],
    "может быть не кратен периоду регистра расчета",True)

    Vopros29 = Vopros_(14,"*Для того, чтобы записи регистра расчета попадали в базовый период по периоду регистрации:*",
    ["в плане видов расчета, связанном с регистром расчета, должен быть установлен признак зависимости от базы 'Зависит по периоду регистрации'", 
     "в плане видов расчета, связанном с регистром расчета, может быть установлен любой признак зависимости от базы, записи регистра расчета всегда будут попадать в базовый период по периоду регистрации",
     "в регистре расчета должен быть установлен признак 'Период регистрации'"],
    "в плане видов расчета, связанном с регистром расчета, должен быть установлен признак зависимости от базы 'Зависит по периоду регистрации'",
    True)

    Vopros30 = Vopros_(14,"*Для определения свойства 'график' регистра расчета используется:*",
    ["обьект конфигурации 'календарь'", "неперодический регистр сведений","подчиненный справочник"],
    "неперодический регистр сведений",True)
    #Vopros11 = Vopros_(14,"* *",[" ", " "," "," "," "," "],"Варианты 1 и/или 4",False)

    PackVoprosovRazdela = [Vopros1,Vopros2,Vopros3,Vopros4,Vopros5,Vopros6,Vopros7,Vopros8,Vopros9,Vopros10,Vopros11,Vopros12,Vopros13,Vopros14,Vopros15,Vopros16,Vopros17,Vopros18,Vopros19,Vopros20,Vopros21,Vopros22,Vopros23,Vopros24,Vopros25,Vopros26,Vopros27,Vopros28,Vopros29,Vopros30]

    #information = [Vopros1,Vopros1];
    #LoadQuestion(message,PackVoprosovRazdela)
    return PackVoprosovRazdela

ПравильныхОтветов = 0
НеправильныхОтветов = 0
вопросы_в_буфере = [[],[]]
def Razdel1Otvet(message,otv):
    global UserOtvet
    global VoprosRazd
    global удалить_элемент
    global ПравильныхОтветов
    global НеправильныхОтветов
    global varVopros_zagr

    print (UserOtvet)
    print (VoprosRazd[1])
    print (varVopros_zagr[int(otv)])

    if (varVopros_zagr[int(otv)] == VoprosRazd[1]):
        #bot.send_message(message.chat.id, text="Правильный ответ!")
        ПравильныхОтветов = ПравильныхОтветов+1
    else:
        #bot.send_message(message.chat.id, text="Неверный ответ!")
        НеправильныхОтветов = НеправильныхОтветов+1
    
    bot.delete_message(message.chat.id, message.message_id)
    #bot.delete_message(message.chat.id, message.message_id-2)
    #bot.delete_message(message.chat.id, message.message_id-3)

    UserOtvet = ""
    удалить_элемент = True
    #LoadNextQuest()  
    LoadQuestion(message,вопросы_в_буфере)

удалить_элемент = False
номерТекущегоВопроса = 1
всегоВопросов = 0
varVopros_zagr = None
def LoadQuestion(message,information):
    global VoprosRazd
    global удалить_элемент
    global ПравильныхОтветов
    global НеправильныхОтветов
    global первый_костыль
    global Select_Inf
    global UserOtvet
    global всегоВопросов
    global номерТекущегоВопроса
    global varVopros_zagr
    if удалить_элемент:
        information.pop(0)
    else:
        всегоВопросов = len(information)   
 
    
    lock = False 
    for varVopros in information:
        if lock:
            break;

        varVopros_zagr = []
        if varVopros.parametr_peremeshka:
            varVopros_ = []
            
            вариантыОтветов = "\n";
            for varOtvet in varVopros.variant_otvet:
                varVopros_.append(varOtvet)
            
            keyboard = types.InlineKeyboardMarkup()
            количествоВопросов = len(varVopros_)
            varКоличество = количествоВопросов
            номерОтвета = 1;
            for i in range(0, количествоВопросов):
                вариантВопроса = random.randint(0,varКоличество-1)
                key = types.InlineKeyboardButton(text = str(номерОтвета), callback_data='_'+str(номерОтвета-1))

                keyboard.add(key)

                вариантыОтветов = вариантыОтветов +str(номерОтвета)+". "+ varVopros_[вариантВопроса] +";\n"
                номерОтвета = номерОтвета + 1
                varVopros_zagr.append(varVopros_[вариантВопроса])
                varVopros_.pop(вариантВопроса)
                varКоличество = varКоличество - 1
            

            bot.send_message(message.chat.id, text=str(ПравильныхОтветов+НеправильныхОтветов+1)+"/"+str(всегоВопросов)+": "+varVopros.zagolovok+вариантыОтветов, reply_markup=keyboard,parse_mode="Markdown")
            номерТекущегоВопроса = номерТекущегоВопроса + 1
            VoprosRazd[0] = varVopros.zagolovok
            VoprosRazd[1] = varVopros.pravilnueOtvet
            удалить_элемент = False    
            первый_костыль = True
            lock = True 
        else:
            номерОтвета = 1;

            вариантыОтветов = "\n";
            keyboard = types.InlineKeyboardMarkup()
            for varOtvet in varVopros.variant_otvet:
                key = types.InlineKeyboardButton(text = str(номерОтвета), callback_data='_'+str(номерОтвета-1))
                keyboard.add(key)
                вариантыОтветов = вариантыОтветов +str(номерОтвета)+". "+ varOtvet +";\n"
                varVopros_zagr.append(varOtvet)
                номерОтвета = номерОтвета + 1
            bot.send_message(message.chat.id, text=str(ПравильныхОтветов+НеправильныхОтветов+1)+"/"+str(всегоВопросов)+": "+varVopros.zagolovok+вариантыОтветов, reply_markup=keyboard,parse_mode="Markdown")
 
            VoprosRazd[0] = varVopros.zagolovok
            VoprosRazd[1] = varVopros.pravilnueOtvet
            удалить_элемент = False    
            первый_костыль = True
            lock = True

    if lock:
        return
    else:
        удалить_элемент = False
        bot.send_message(message.chat.id, text="Раздел 1. Общие механизмы, понятия и термины.|\n\n*Результат:*\n"+str(ПравильныхОтветов)+" из "+str(int(НеправильныхОтветов+ПравильныхОтветов))+"\n", parse_mode="Markdown")   
        ПравильныхОтветов = 0
        НеправильныхОтветов = 0

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
     
        btn1 = types.KeyboardButton("✦ Экзамен") 
        btn3 = types.KeyboardButton("✦ Разделы")
        btn2 = types.KeyboardButton("✧ Справка")
        markup.add(btn1)
        markup.add(btn3)
        markup.add(btn2)
        bot.send_message(message.chat.id, text="Главное меню \nБот для подготовки для сдачи Проф. 1С \nВерсия: [Alpha].".format(message.from_user), reply_markup=markup)
        Select_Inf = ""
        lock = False
        UserOtvet  = ""
        Select_Inf = "Zapros1"


# Обработчик нажатий на кнопки
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data[0] == "_": 
        Razdel1Otvet(call.message,call.data[1])       


id_сообщения = -1    
@bot.message_handler(content_types=['text'])
def func(message):
    global вопросы_в_буфере
    global Select_Inf
    global FKD_TES
    global UserOtvet
    global id_сообщения
    global удалить_элемент
    global номерТекущегоВопроса
    global всегоВопросов

    print (message.text)
    if(message.text == "✦ Экзамен"):

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn5 = types.KeyboardButton("Назад")
        markup.add(btn5)
        bot.send_message(message.chat.id, text="Пока не доступен.", reply_markup=markup)
        Select_Inf = "Zapros"

    elif message.text == "✦ Разделы":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn5 = types.KeyboardButton("Назад")
        markup.add(btn5)
        btn1  = types.KeyboardButton("01. Общие механизмы, понятия и термины") 
        btn2  = types.KeyboardButton("02. Редакторы и инстурменты общие")
        btn3  = types.KeyboardButton("03. Редакторы и инструменты режима разработки")
        btn4  = types.KeyboardButton("04. Конструкторы")
        btn5  = types.KeyboardButton("05. Технология разработки")
        btn6  = types.KeyboardButton("06. Объектная модель прикладного решения")
        btn7  = types.KeyboardButton("07. Табличная модель прикладного решения")
        btn8  = types.KeyboardButton("08. Механизмы интеграции и обмена данными")
        btn9  = types.KeyboardButton("09. Система взаимодействия")
        btn10 = types.KeyboardButton("10. Интерфейсные механизмы")
        btn11 = types.KeyboardButton("11. Механизмы построения отчетности")
        btn12 = types.KeyboardButton("12. Механимзы оперативного учета")
        btn13 = types.KeyboardButton("13. Объекты и механизмы бухгалтерского учета")
        btn14 = types.KeyboardButton("14. Механизмы сложных переодических расчетов")

        markup.add(btn1)
        markup.add(btn2)
        markup.add(btn3)
        markup.add(btn4)
        markup.add(btn5)
        markup.add(btn6)
        markup.add(btn7)
        markup.add(btn8)
        markup.add(btn9)
        markup.add(btn10)
        markup.add(btn11)
        markup.add(btn12)
        markup.add(btn13)
        markup.add(btn14)

        bot.send_message(message.chat.id, text="Выберите раздел:", reply_markup=markup)
        Select_Inf = "Zapros1"

        номерТекущегоВопроса = 1
        всегоВопросов = 0
 
    elif message.text == "✧ Справка":
        bot.send_message(message.chat.id, text="Справка: ....?")


    elif message.text == "Назад" and (Select_Inf == "Zapros" or Select_Inf == "Zapros1"):
        bot.delete_message(message.chat.id, message.message_id)
        bot.delete_message(message.chat.id, message.message_id-1)
        bot.delete_message(message.chat.id, message.message_id-2)
        bot.delete_message(message.chat.id, message.message_id-3)


        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
     
        btn1 = types.KeyboardButton("✦ Экзамен") 
        btn3 = types.KeyboardButton("✦ Разделы")
        btn2 = types.KeyboardButton("✧ Справка")
        markup.add(btn1)
        markup.add(btn3)
        markup.add(btn2)
        bot.send_message(message.chat.id, text="Главное меню \nБот для подготовки для сдачи Проф. 1С \nВерсия: [Alpha].".format(message.from_user), reply_markup=markup)
        Select_Inf = ""

    #----------------------------------------------------------------------------------------------------------------

    #Exc
    elif Select_Inf == "Zapros":
        ter = ""

    #01 Раздел
    elif Select_Inf == "Zapros1" and (message.text == "01. Общие механизмы, понятия и термины"):
        
        bot.delete_message(message.chat.id, message.message_id)
        bot.delete_message(message.chat.id, message.message_id-1)
        bot.delete_message(message.chat.id, message.message_id-2)
        bot.delete_message(message.chat.id, message.message_id-3)

        Select_Inf = "Razdel1"
        вопросы_в_буфере = Razdel1(message)
        id_сообщения = message.message_id
        удалить_элемент = False
        LoadQuestion(message,вопросы_в_буфере)

    elif Select_Inf == "Zapros1" and (message.text == "14. Механизмы сложных переодических расчетов"):
        
        bot.delete_message(message.chat.id, message.message_id)
        bot.delete_message(message.chat.id, message.message_id-1)
        bot.delete_message(message.chat.id, message.message_id-2)
        bot.delete_message(message.chat.id, message.message_id-3)

        Select_Inf = "Razdel1"
        вопросы_в_буфере = Razdel14(message)
        id_сообщения = message.message_id
        удалить_элемент = False
        LoadQuestion(message,вопросы_в_буфере)

    #01 Раздел - otv
    elif (Select_Inf == "Razdel1" or Select_Inf == "Razdel14") and UserOtvet == "":
        UserOtvet  = message.text
    else:
        bot.send_message(message.chat.id, text="На такую комманду я не запрограммировал..")

bot.polling(none_stop=True)


